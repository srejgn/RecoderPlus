* Encoding: windows-1252.
* .
* Please report bugs to: egonzalez@ets.org or eugene.gonzalez@iea-hamburg.de.
* .
* This macro recodes existing variables in one of 3 ways:
* 
*   1) Creates contrast coded variables for variables listed as "CatVARS". Contrast coding can be
*      done using dummy or effect coding.
*   2) Imputes missing values for a variable with the mean of the non-missing values for variables 
*      listed as "ImpMean". It also creates a dummy coded variable indicating those cases
*      with missing values in the original variable. 
*   3) Recodes the values of a variable listed as "UseCrit" to the mean for the
*      group on a criterion variable (Critvar).
*
*  In addition to recoding existing variables, it can create interaction vectors between the recoded variable. 
*
*.

define !RecoderPlus
   ( indir     = !charend('/') !default("")  /
     infile    = !charend('/') !default("")  /
     outdir    = !charend('/') !default("")  /
     outfile   = !charend('/') !default("")  /
     SelCrit   = !charend('/') !default("")  /
     wgtvar    = !charend('/') !default("")  /
     CatVars   = !charend('/') !default("")  /
     ConType   = !charend('/') !defualt("D") /
     IntVarsA  = !charend('/') !default("")  /
     IntVarsB  = !charend('/') !default("")  /
     IntVec    = !charend('/') !default("")  /
     ImpMean   = !charend('/') !default("")  /
     UseCrit   = !charend('/') !default("")  /
     Critvar   = !charend('/') !default("")  /
     ByVars    = !charend('/') !default("")  /
     ViewCod   = !charend('/') !default("Y") /
     QCStats   = !charend('/') !default("Y") /
     Clean     = !charend('/') !default("N") ).

new file.
dataset close all.
output close name = !unquote(!infile).
output new name = !unquote(!infile).

* If viewcode is selected.
!if (!upcase(!viewcod)=Y) !then
set mprint=on  printback=on.
!else
set mprint=off printback=off.
!ifend


OMS  /SELECT ALL
     /IF COMMANDS=['Alter Type' 'Variables to Cases' 'Cases to Variables']
     /DESTINATION VIEWER=NO.

get file = !quote(!concat(!unquote(!indir),"\",!infile,".sav")).
compute k = 1.

!if (!selcrit !ne !null) !then
select if (!selcrit).
!ifend

sort cases by k !byvars.

* Check if weight variable was specified, if not, create one called WGTVAR such that WGTVAR = 1 for all cases.
!if (!wgtvar = !null) !then
!let !wgt = WgtVar.
compute WgtVar = 1.
!else
!let !wgt = !wgtvar.
!ifend
select if (!wgt > 0).

* Convert variables to sequential and numeric variables so input values can be string or non-sequential.
autorecode !do !v !in(!concat(!CatVars," ",!ImpMean)) !v !doend
    / into !do !v !in(!concat(!CatVars," ",!ImpMean)) !concat(!v,"_n") !doend.

* Process IMPMEAN variables.
!if (!ImpMean !ne !null) !then
weight by !wgt.
aggregate outfile = * mode = addvariables
  / presorted
  / break = k !byvars
  /       !do !v !in(!ImpMean) !upcase(!concat(!v,"_x")) !doend
   = mean(!do !v !in(!ImpMean) !v  !doend).
weight off.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).


* Create the recode syntax.
temporary.
select if ($casenum=1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodes.txt"))
 !do !v !in(!ImpMean)
   / !quote(!concat("recode ",!v," (sysmis = -999) (missing = -888) (else = -777) into ",!v,"_n."))
   / !quote(!concat("do if (not(missing(",!v,")))."))
   / !quote(!concat("compute ",!upcase(!v),"_1"," = ", !v,"."))
   / !quote(!concat("compute ",!upcase(!v),"_2 =  0."))
   / !quote(!concat("else if (missing(",!v,")) ."))
   / !quote(!concat("compute ",!upcase(!v),"_1 = ", !v,"_x ."))
   / !quote(!concat("compute ",!upcase(!v),"_2 =  1."))
   / !quote("end if.") /
 !doend.
execute.

* Write out the IMPMEAN variables.
temporary.
select if ($casenum=1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.txt"))
 !do !v !in(!upcase(!ImpMean))
 / !quote(!v) 1 !quote(!concat(!v,"_1")) 33 "Impute Means" 65
 / !quote(!v) 1 !quote(!concat(!v,"_2")) 33 "Impute Means" 65
 !doend.
execute.

* Create the check syntax.
temporary.
select if ($casenum = 1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodesCheck.txt"))
  / !quote(!concat("weight by ",!wgt," ."))
 !do !v !in(!ImpMean)
  / "temporary."
  / !quote(!concat("recode ",!v, "(sysmis = -999) (else = copy)."))
  / !quote(!concat("means tables = ", !v," ",!v,"_1"," ",!v,"_2 by ",!v,"_n / missing = include."))
 !doend
  / "weight off." /.
execute.
!ifend


* Process the USECRIT variables.
!if (!UseCrit !ne !null !and !critvar !ne !null) !then
weight by !wgt.
!do !v !in(!UseCrit)
aggregate outfile = * mode = addvariables
  / break = k !byvars !v
  / !upcase(!concat(!v,"_x")) = mean(!critvar).
!doend
weight off.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).


*  Create the recode syntax.
temporary.
select if ($casenum = 1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodes.txt"))
 !do !v !in(!UseCrit)
  / !quote(!concat("recode ",!v," (sysmis = -999)(else = copy) into ",!upcase(!v),"_n.")) 
 !doend
 /
 !do !v !in(!UseCrit)
  / !quote(!concat("compute ",!upcase(!v),"_1 = ",!v,"_x."))
 !doend .
execute.

* Write out the USECRIT variables.
temporary.
select if ($casenum=1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.txt"))
 !do !v !in(!upcase(!UseCrit))
 / !quote(!v) 1 !quote(!concat(!v,"_1")) 33 "Use Criterion" 65
 !doend.
execute.

* Create the check syntax.
temporary.
select if ($casenum = 1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodesCheck.txt"))
  / !quote(!concat("weight by ",!wgt," ."))
  !do !v !in(!UseCrit)
  / !quote(!concat("means tables ",!critvar," ",!v,"_1 by ",!v,"_n / missing = include."))
  !doend
  / "weight off." /.
execute.
!ifend


* Process the CATVARS.
!if (!catvars !ne !null) !then

* This is to get the range with the descriptives when sysmis are present.
recode !do !v !in(!catvars) !concat(!v,"_n") !doend (sysmis = 0) (else=copy).
oms / select tables / if commands = ["Descriptives"] subtypes = ["Descriptive Statistics"]
    / destination format = sav outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav"))
      viewer = yes / tag = 'omsdesc'.
desc var = !do !v !in (!catvars) !concat(!v,"_n") !doend / statistics = min max.
omsend tag = ['omsdesc'].

* This to assign SYSMIS values to 99 in the main file.
recode !do !v !in(!catvars) !concat(!v,"_n") !doend (0 = 99) (else = copy).
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).

* This to address cases with SYSMIS data.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav"))
  / drop = Command_ Subtype_ Label_ / rename =(var1 = VarNameN).
select if (rtrim(VarNameN) ne "Valid N (listwise)").
string VarName (a32).
numeric VarSeq Category (f4.0).
compute VarNameN = upcase(VarNameN).
compute VarName  = upcase(char.substr(VarNameN,1,length(rtrim(VarNameN))-2)).
compute VarSeq = $casenum.
save outfile  = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav")).
loop Category = Minimum to Maximum.
xsave outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).
end loop.
execute.
new file.

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).
recode Category (0 = 99) (else = copy) into CategoryV.
sort cases by VarSeq CategoryV.
if (Minimum = 0 and Category = 0) Category = Maximum + 1.
string ContrastVar (a32) CategorySeq (a4) CategoryVal (a4).
compute CategorySeq = ltrim(string(Category,f4.0)).
compute CategoryVal = ltrim(string(CategoryV,f4.0)).
compute ContrastVar = upcase(concatenate(rtrim(Varname),"_",!quote(!ConType),CategorySeq)).
compute NCats = Maximum - Minimum + 1.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).

* Create the recode syntax.
temporary.
string RecLine1 RecLine2 (a128).
do if (Category > 1).
compute RecLine1 = concatenate("numeric ",rtrim(ContrastVar),"(f4.0).").
!if (!upcase(!ConType) = D) !then
compute RecLine2 = concatenate("recode ", rtrim(VarNameN)," (",rtrim(CategoryVal)," = 1) (else = 0) into ", rtrim(ContrastVar),".").
!ifend
!if (!upcase(!ConType) = E) !then
compute RecLine2 = concatenate("recode ", rtrim(VarNameN)," (1 = -1) (",rtrim(CategoryVal)," = 1) (else = 0) into ", rtrim(ContrastVar),".").
!ifend
end if.
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodes.txt"))
   / RecLine1
   / RecLine2 .
execute.

* Create the check syntax.
temporary.
select if (Category = NCats).
string RecLine (a128).
compute RecLine = concatenate("means tables = ",rtrim(VarName),"_",!quote(!ConType),"2 to ", rtrim(ContrastVar) ," by ", rtrim(VarNameN)," / missing = include.").
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodesCheck.txt"))
  / RecLine.
execute.
!ifend


* Create summary tables for each interaction between 2 categorical variables.
!if (!intvec !ne !null !and !catvars !ne !null) !then
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav"))
 / keep = Varname Minimum Maximum.
sort cases by Varname.
casestovars index = Varname.

* copy list of variables so you can operate the lists.
!let !AVars   = !upcase(!IntVarsA)
!let !BVars   = !upcase(!IntVarsB)
!let !IntVars = !upcase(!IntVec)
!do !IntVar !in(!IntVars)
!let !AVar = !head(!AVars)
!let !BVar = !head(!BVars)

!if (!index(!concat(" ",!upcase(!catvars)," "),!concat(" ",!avar," ")) !ne 0 !and
     !index(!concat(" ",!upcase(!catvars)," "),!concat(" ",!bvar," ")) !ne 0 ) !then

loop !concat(!Avar,"_N") = !concat("Minimum.",!Avar) to !concat("Maximum.",!Avar). 
loop !concat(!Bvar,"_N") = !concat("Minimum.",!Bvar) to !concat("Maximum.",!Bvar).
xsave outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"0.sav"))
  / keep = !concat(!Avar,"_N") !concat(!Bvar,"_N").
end loop.
end loop.
!ifend
!let !AVars   = !tail(!AVars)
!let !BVars   = !tail(!BVars)
!doend
!ifend
execute.

* Create recode statement for each interaction.
* copy list of variables so you can operate lists.
!let !AVars   = !upcase(!IntVarsA)
!let !BVars   = !upcase(!IntVarsB)
!let !IntVars = !upcase(!IntVec)
!do !IntVar !in(!IntVars)
!let !AVar = !head(!AVars)
!let !BVar = !head(!BVars)

* When interacting categorical variables.
!if (!index(!concat(" ",!upcase(!catvars)," "),!concat(" ",!upcase(!avar)," ")) !ne 0 !and
     !index(!concat(" ",!upcase(!catvars)," "),!concat(" ",!upcase(!bvar)," ")) !ne 0 ) !then

get file = !quote(!concat(!unquote(!outdir),"\",!intvar,"0.sav")).
recode !concat(!Avar,"_n") !concat(!Bvar,"_n") (0 = 99) (else = copy).
sort cases by !concat(!Avar,"_n") !concat(!Bvar,"_n").
select if (!concat(!Avar,"_n") > 1 and !concat(!Bvar,"_n") > 1).
string IntSeq (a4).
compute IntSeq = string($casenum,f4.0).
format !concat(!AVar,"_n") !concat(!BVar,"_n") (f4.0).
alter type !concat(!AVar,"_n") !concat(!BVar,"_n") (a4).
string intvar (a32) RecLine1 RecLine2 (a128).
compute intvar   = concatenate(!quote(!intvar),"_",rtrim(ltrim(IntSeq))).
compute RecLine1 = concatenate("compute ",!quote(!intvar),"_",rtrim(ltrim(IntSeq))," = 0.").
compute RecLine2 = concatenate("if (",!quote(!concat(!AVar,"_n"))," = ", rtrim(ltrim(!concat(!AVar,"_n"))),
                              " and ",!quote(!concat(!BVar,"_n"))," = ", rtrim(ltrim(!concat(!BVar,"_n"))),") ",
                               !quote(!intvar),"_",rtrim(ltrim(IntSeq))," = 1.").
compute k = 1.
aggregate outfile = * mode = addvariables
 / break = k
 / NInteract = n(k).
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt"))
 / RecLine1
 / RecLine2.
execute.
temporary.
select if ($casenum=1).
string chkcode (a128).
compute chkcode = concatenate("means tables = ",!quote(!intvar),"_1 to ",!quote(!intvar),
                  "_", rtrim(ltrim(string(ninteract,f4.0)))," by ",!quote(!concat(!Avar,"_n"))," by ",!quote(!concat(!BVar,"_n")),
                  " / cells=mean / missing=include.").
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt"))
 / chkcode.
execute.
string VarNameA VarNameB (a32).
compute VarNameA = !quote(!AVar).
compute VarNameB = !quote(!BVar).
rename var ( !concat(!AVar,"_n") !concat(!BVar,"_n") =
             GroupA              GroupB).
alter type   GroupA GroupB (a4).
save outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,".sav")) / drop = k.
new file.
erase file = !quote(!concat(!unquote(!outdir),"\",!intvar,"0.sav")).

* Interaction of non categorical with non categorical
!else !if (!index(!concat(" ",!upcase(!ImpMean)," ",!upcase(!UseCrit)," "),!concat(" ",!upcase(!avar)," ")) !ne 0 !and
           !index(!concat(" ",!upcase(!ImpMean)," ",!upcase(!UseCrit)," "),!concat(" ",!upcase(!bvar)," ")) !ne 0 ) !then

data list
 / RecLine1 (a128).
begin data.
!concat("compute ",!intvar,"_1 = ", !avar,"_1 * ",!bvar,"_1.")
end data.
string VarNameA VarNameB IntVar (a32) chkcode (a128) GroupA GroupB (a4).
compute VarNameA = !quote(!AVar).
compute VarNameB = !quote(!BVar).
compute NInteract = 1.
compute IntVar = !quote(!concat(!intvar,"_1")).
compute chkcode = " ".
save outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,".sav")) / drop = chkcode.
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt"))
 / RecLine1 .
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt"))
 / chkcode.

!else

* Interaction of categorical with non categorical.
!if (!index(!concat(" ",!upcase(!catvars)," "),!concat(" ",!upcase(!avar)," ")) !ne 0) !then
!let !catvar = !avar
!let !contvar = !bvar
!else
!let !catvar = !bvar
!let !contvar = !avar
!ifend

new file.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav"))
  / drop = VarNameN N Minimum Maximum  VarSeq  CategoryV CategoryVal NCats.
select if (VarName = !quote(!upcase(!catvar)) and Category > 1).
string RecLine1 (a128) IntVar (a32) VarNameA VarNameB (a32) GroupA GroupB (a4).
compute VarNameA = !quote(!AVar).
compute VarNameB = !quote(!BVar).
!if (!catvar = !avar) !then
compute GroupA    = CategorySeq.
!else
compute GroupB    = CategorySeq.
!ifend

compute RecLine1 = concatenate("compute ",!quote(!IntVar),"_",rtrim(CategorySeq)," = ",
                   rtrim(ContrastVar)," * ",!quote(!contvar),"_1 .").
compute IntVar = concatenate(!quote(!IntVar),"_",rtrim(CategorySeq)).
save outfile = !quote(!concat(!unquote(!outdir),"\",!IntVar,".sav"))
  / drop = Category VarName ContrastVar CategorySeq.
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt"))
 / RecLine1 .
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt"))
 / " " .
execute.
!ifend
!ifend

!let !AVars   = !tail(!AVars)
!let !BVars   = !tail(!BVars)
!doend

* Include and apply the recodes.

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).
weight off.

* include the recoding and check statements.
!if (!UseCrit !ne !null !and !critvar !ne !null) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodes.txt")).
!if (!upcase(!QCStats) = Y) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodesCheck.txt")).
!ifend
!ifend

!if (!ImpMean !ne !null) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodes.txt")).
!if (!upcase(!QCStats) = Y) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodesCheck.txt")).
!ifend
!ifend

!if (!CatVars !ne !null) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodes.txt")).
!if (!upcase(!QCStats) = Y) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodesCheck.txt")).
!ifend
!ifend


* Include recoding statements for the interactions.
!do !IntVar !in(!IntVec)
include file = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt")).
!doend
* check contrast coding of interactions.
!if (!upcase(!QCStats) = Y) !then
!do !IntVar !in(!IntVec)
include file = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt")).
!doend
!ifend

save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav"))
  / drop = k !do !c !in (!catvar)  !concat(!c,"_n")                  !doend
             !do !u !in (!usecrit) !concat(!u,"_n") !concat(!u,"_x") !doend
             !do !i !in (!impmean) !concat(!i,"_n") !concat(!i,"_x") !doend.
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.csv"))
  / drop = k !do !c !in (!catvar)  !concat(!c,"_n")                  !doend
             !do !u !in (!usecrit) !concat(!u,"_n") !concat(!u,"_x") !doend
             !do !i !in (!impmean) !concat(!i,"_n") !concat(!i,"_x") !doend
  / type = csv / fieldnames / replace.



* Create list of UseCrit and ImpMean variables.
!if (!ImpMean !ne !null) !then
data list file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.txt"))
  / Varname (a32) ContrastVar (a32) Type (a32). 
compute VarSeq = trunc(($casenum-1)/2 + 1).
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.sav")).
!ifend

!if (!UseCrit !ne !null !and !critvar !ne !null) !then
data list file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.txt"))
  / Varname (a32) ContrastVar (a32) Type (a32). 
compute VarSeq = $casenum.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.sav")).
!ifend

* Get the list of CatVars.
!if (!CatVars !ne !null) !then
new file.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav"))
 /  keep = VarSeq VarName Category CategoryV ContrastVar .
select if (Category > 1). 
string Type (a32).
compute Type = "Contrast Coded".
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVars.sav")).
!ifend

* Compile the list of variables.
add files 
 !if (!UseCrit !ne !null !and !critvar !ne !null) !then / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.sav")) !ifend
 !if (!ImpMean !ne !null) !then / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.sav")) !ifend 
 !if (!CatVars !ne !null) !then / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVars.sav"))     !ifend .
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_RecodedVars.sav")).
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_RecodedVars.csv"))
  / type = csv / fieldnames / replace.

* Compile the list of new interaction variables.
!if (!IntVec !ne !null) !then
get file = !quote(!concat(!unquote(!outdir),"\",!head(!IntVec),".sav")).
!do !IntVar !in(!tail(!IntVec))
add files
  / file = *
  / file = !quote(!concat(!unquote(!outdir),"\",!intvar,".sav")).
!doend
execute.
save outifle = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.sav"))
  / keep = VarNameA VarNameB GroupA GroupB IntVar recline1 recline2 NInteract IntSeq.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.sav")).
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.csv"))
  / type = csv / fieldnames / replace.
!ifend

output save 
  outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.spv"))
  lock = no.

new file.

!if (!upcase(!clean) = Y) !then
!if (!intvec !ne !null) !then
!do !v !in(!intvec)
erase file = !quote(!concat(!unquote(!outdir),"\",!v,"_Check.txt")).
erase file = !quote(!concat(!unquote(!outdir),"\",!v,"_Recodes.txt")).
erase file = !quote(!concat(!unquote(!outdir),"\",!v,".sav")).
!doend
!ifend

!if (!catvars !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVars.sav")).
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav")).
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).
!ifend

!if (!ImpMean !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.sav")).
!ifend

!if (!UseCrit !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.sav")).
!ifend

!if (!IntVec !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.sav")).
!ifend






erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_RecodedVars.sav")).

!ifend
new file.

!enddefine.
