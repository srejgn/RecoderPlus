* Encoding: windows-1252.
* .
* Please report bugs to: egonzalez@ets.org or eugene.gonzalez@iea-hamburg.de.
* .
* This macro recodes existing variables in one of 3 ways:
* 
*   1) Creates contrast coded variables for variables listed as "CatVARS". Contrast coding can be
*      done using dummy or effect coding.
*   2) Imputes missing values for a variable with the mean of the non-missing values for variables 
*      listed as "ImpMean". It also creates a dummy coded variable indicating those cases
*      with missing values in the original variable. 
*   3) Recodes the values of a variable listed as "UseCrit" to the mean for the
*      group on a criterion variable (Critvar).
*
*  In addition to recoding existing variables, it can create interaction vectors between the recoded variable. 
*
*.

define !RecoderPlus
   ( indir     = !charend('/') !default("")  /
     infile    = !charend('/') !default("")  /
     outdir    = !charend('/') !default("")  /
     outfile   = !charend('/') !default("")  /
     SelCrit   = !charend('/') !default("")  /
     wgtvar    = !charend('/') !default("")  /
     IDVars    = !charend('/') !default("")  /
     vfile     = !charend('/') !default("")  /
     CatVars   = !charend('/') !default("")  /
     ConType   = !charend('/') !defualt("D") /
     IntVarsA  = !charend('/') !default("")  /
     IntVarsB  = !charend('/') !default("")  /
     IntVec    = !charend('/') !default("")  /
     ImpMean   = !charend('/') !default("")  /
     UseCrit   = !charend('/') !default("")  /
     Critvar   = !charend('/') !default("")  /
     KeepVars  = !charend('/') !default("")  /
     LOO       = !charend('/') !default("Y") /
     ByVars    = !charend('/') !default("")  /
     ViewCod   = !charend('/') !default("Y") /
     QCStats   = !charend('/') !default("Y") /
     Clean     = !charend('/') !default("N") ).

preserve.

set ovars=name tvars=name.

new file.
dataset close all.
output close name = !unquote(!infile).
output new name = !unquote(!infile).

* If viewcode is selected.
!if (!upcase(!viewcod)=Y) !then
set mprint=on  printback=on.
!else
set mprint=off printback=off.
!ifend

!let !byvarsR = k
!do !bv !in(!byvars)
!let !byvarsR = !concat(!bv,!blank(1),!byvarsR)
!doend

OMS  /SELECT ALL
     /IF COMMANDS=['Alter Type' 'Variables to Cases' 'Cases to Variables']
     /DESTINATION VIEWER=NO.

* Assing variables .
!if (!upcase(!vfile) !eq Y) !then
!let !fcatvars = !upcase(!eval(!ctvr))
!let !fimpmean = !upcase(!eval(!imvr))
!let !fusecrit = !upcase(!eval(!ucvr))
!else
!let !fcatvars = !upcase(!catvars)
!let !fimpmean = !upcase(!impmean)
!let !fusecrit = !upcase(!usecrit)
!ifend

get file = !quote(!concat(!unquote(!indir),"\",!infile,".sav"))
  / keep = !idvars !byvars !wgtvar !fcatvars !fimpmean !fusecrit !critvar !keepvars.
compute k = 1.
compute CaseSeq = $casenum.

!if (!selcrit !ne !null) !then
select if (!selcrit).
!ifend

sort cases by !tail(!ByVarsR) !head(!ByVarsR).

* Check if weight variable was specified, if not, create one called WGTVAR such that WGTVAR = 1 for all cases.
!if (!wgtvar = !null) !then
!let !wgt = WgtVar.
compute WgtVar = 1.
!else
!let !wgt = !wgtvar.
!ifend
select if (!wgt > 0).

* Convert variables to sequential and numeric variables so input values can be string or non-sequential.
!if (!fcatvars !ne !null !or !fimpmean !ne !null) !then
autorecode !do !v !in(!concat(!fcatvars," ",!fimpmean)) !v !doend
    / into !do !v !in(!concat(!fcatvars," ",!fimpmean)) !concat(!v,"_n") !doend.
missing values !do !v !in(!concat(!fcatvars," ",!fimpmean)) !concat(!v,"_n") !doend ().
!ifend

* Process IMPMEAN variables.
!if (!fimpmean !ne !null) !then
weight by !wgt.
aggregate outfile = * mode = addvariables
  / presorted
  / break = !tail(!ByVarsR) !head(!ByVarsR)
  /       !do !v !in(!fimpmean) !upcase(!concat(!v,"_x")) !doend
   = mean(!do !v !in(!fimpmean) !v  !doend).

* do this in case all missing within the byvars.
!if (!tail(!byvarsR) !ne(!null)) !then
aggregate outfile = * mode = addvariables
  / presorted
  / break = !tail(!byvarsR)
  /       !do !v !in(!fimpmean) !upcase(!concat(!v,"_y")) !doend
   = mean(!do !v !in(!fimpmean) !v  !doend).
!do !v !in(!fimpmean)
if missing(!concat(!v,"_x")) !concat(!v,"_x") = !concat(!v,"_y").
!doend
execute.
delete variables !do !v !in(!fimpmean) !concat(!v,"_y") !doend.
!ifend
weight off.

save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).

* Create the recode syntax.
temporary.
select if ($casenum=1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodes.txt"))
 !do !v !in(!fimpmean)
   / !quote(!concat("recode ",!v," (sysmis = -999) (missing = -888) (else = -777) into ",!v,"_n."))
   / !quote(!concat("do if (not(missing(",!v,")))."))
   / !quote(!concat("compute ",!upcase(!v),"_1"," = ", !v,"."))
   / !quote(!concat("compute ",!upcase(!v),"_2 =  0."))
   / !quote(!concat("else if (missing(",!v,")) ."))
   / !quote(!concat("compute ",!upcase(!v),"_1 = ", !v,"_x ."))
   / !quote(!concat("compute ",!upcase(!v),"_2 =  1."))
   / !quote("end if.") /
 !doend.
execute.

* Write out the IMPMEAN variables.
temporary.
select if ($casenum=1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.txt"))
 !do !v !in(!upcase(!fimpmean))
 / !quote(!v) 1 !quote(!concat(!v,"_1")) 33 "Impute Means" 65
 / !quote(!v) 1 !quote(!concat(!v,"_2")) 33 "Impute Means" 65
 !doend.
execute.

* Create the check syntax.
temporary.
select if ($casenum = 1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodesCheck.txt"))
  / !quote(!concat("weight by ",!wgt," ."))
 !do !v !in(!fimpmean)
  / "temporary."
  / !quote(!concat("recode ",!v, "(sysmis = -999) (else = copy)."))
  / !quote(!concat("means tables = ", !v," ",!v,"_1"," ",!v,"_2 by ",!v,"_n / missing = include."))
 !doend
  / "weight off." /.
execute.
!ifend

* Process the USECRIT variables.
!if (!fusecrit !ne !null !and !critvar !ne !null) !then

weight by !wgt.
!do !v !in(!fusecrit)

aggregate outfile = * mode = addvariables
  / break = !v !tail(!byvarsR)
  / !concat(!critvar,"_",!v,"_x") = mean(!critvar).
temporary.
select if (not(missing(!critvar))).
aggregate outfile = !quote(!concat(!unquote(!outdir),"\",!v,".tmp"))
  / break = !v !byvarsR
  / !concat(!v,"_x") = mean(!critvar)
  / !concat(!v,"_sw") = n(!critvar).
sort cases by !v !byvarsR.
match files 
  / file = *
  / table = !quote(!concat(!unquote(!outdir),"\",!v,".tmp"))
  / by = !v !byvarsR.
execute.
!doend

weight off.

save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).

echo "Create the recode syntax".
temporary.
select if ($casenum = 1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodes.txt"))
 !do !v !in(!fusecrit)
  / !quote(!concat("autorecode ",!v," / into ",!upcase(!v),"_n."))
 !doend

 !do !v !in(!fusecrit)
  / !quote(!concat("compute ",!upcase(!v),"_1 = ",!v,"_x."))

   !if (!upcase(!loo) = Y) !then
  / !quote(!concat("do if (not(missing(",!upcase(!critvar),")) and ((",!v,"_sw - ",!wgt,") > 0))."))
  / !quote(!concat("compute ",!upcase(!v),"_1 = ((",!v,"_x * ", !v,"_sw) - (",!critvar," * ",!wgt,")) / (",!v,"_sw -",!wgt,")."))
  / !quote(!concat("end if."))
   !ifend

  / !quote(!concat("compute ",!upcase(!v),"_2 = 0."))
  / !quote(!concat("do if (missing(",!upcase(!v),"_1))."))
  / !quote(!concat("compute ",!upcase(!v),"_1 = ",!critvar,"_",!v,"_x."))
  / !quote(!concat("compute ",!upcase(!v),"_2 = 1."))
  / !quote("end if.")
 !doend.
execute.

echo "Write out the USECRIT variables".
temporary.
select if ($casenum=1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.txt"))
 !do !v !in(!upcase(!fusecrit))
 / !quote(!v) 1 !quote(!concat(!v,"_1")) 33 "Use Criterion" 65
 / !quote(!v) 1 !quote(!concat(!v,"_2")) 33 "Use Criterion" 65
 !doend.
execute.

echo "Create the check syntax for USECRIT variables".
temporary.
select if ($casenum = 1).
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodesCheck.txt"))
  / !quote(!concat("weight by ",!wgt," ."))
  !do !v !in(!fusecrit)
  / !quote(!concat("means tables ",!critvar," ",!v,"_1 by ",!v,"_n / missing = include."))
  !doend
  / "weight off." /.
execute.
!ifend


* Process the CATVARS.
!if (!fcatvars !ne !null) !then

* This is to get the range with the descriptives when sysmis are present.
recode !do !v !in(!fcatvars) !concat(!v,"_n") !doend (sysmis = 0) (else=copy).
oms / select tables / if commands = ["Descriptives"] subtypes = ["Descriptive Statistics"]
    / destination format = sav outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav"))
      viewer = yes / tag = 'omsdesc'.
desc var = !do !v !in (!fcatvars) !concat(!v,"_n") !doend / statistics = min max.
omsend tag = ['omsdesc'].

* This to assign SYSMIS values to 99 in the main file.
recode !do !v !in(!fcatvars) !concat(!v,"_n") !doend (0 = 99) (else = copy).
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).

* This to address cases with SYSMIS data.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav"))
  / drop = Command_ Subtype_ Label_ / rename =(var1 = VarNameN).
select if (rtrim(VarNameN) ne "Valid N (listwise)").
string VarName (a32).
numeric VarSeq (f4.0).
compute VarNameN = upcase(VarNameN).
compute VarName  = upcase(char.substr(VarNameN,1,length(rtrim(VarNameN))-2)).
compute VarSeq = $casenum.
do if (Minimum = Maximum = 1).
compute Minimum = 1.
compute Maximum = 2.
end if.
save outfile  = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav")).
execute.
numeric Category (f4.0).
loop Category = Minimum to Maximum.
xsave outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).
end loop.
execute.
new file.

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).
recode Category (0 = 99) (else = copy) into CategoryV.
sort cases by VarSeq CategoryV.
if (Minimum = 0 and Category = 0) Category = Maximum + 1.
string ContrastVar (a32) CategorySeq (a4) CategoryVal (a4).
compute CategorySeq = ltrim(string(Category,f4.0)).
compute CategoryVal = ltrim(string(CategoryV,f4.0)).
compute ContrastVar = upcase(concatenate(rtrim(Varname),"_",!quote(!ConType),CategorySeq)).
compute NCats = Maximum - Minimum + 1.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).

* Create the recode syntax.
temporary.
string RecLine1 RecLine2 (a128).
do if (Category > 1).
compute RecLine1 = concatenate("numeric ",rtrim(ContrastVar),"(f4.0).").
!if (!upcase(!ConType) = D) !then
compute RecLine2 = concatenate("recode ", rtrim(VarNameN)," (",rtrim(CategoryVal)," = 1) (else = 0) into ", rtrim(ContrastVar),".").
!ifend
!if (!upcase(!ConType) = E) !then
compute RecLine2 = concatenate("recode ", rtrim(VarNameN)," (1 = -1) (",rtrim(CategoryVal)," = 1) (else = 0) into ", rtrim(ContrastVar),".").
!ifend
end if.

write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodes.txt"))
   / RecLine1
   / RecLine2 .
execute.

* Create the check syntax.
temporary.
select if (Category = NCats).
string RecLine (a128).

if (NCats > 1) RecLine = concatenate("means tables = ",rtrim(VarName),"_",!quote(!ConType),"2 to ", rtrim(ContrastVar) ," by ", rtrim(VarNameN)," / missing = include.").
if (Ncats = 1) Recline = concatenate("means tables = ",rtrim(VarName),"_",!quote(!ConType),"2 by ", rtrim(VarNameN)," / missing = include.").

write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodesCheck.txt"))
  / RecLine.
execute.
!ifend


* Create summary tables for each interaction between 2 categorical variables.
!if (!intvec !ne !null !and !fcatvars !ne !null) !then
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav"))
 / keep = Varname Minimum Maximum.
varstocases 
  make value from minimum maximum
   / index = stat(value).
string indexvar (a64).
compute indexvar = concat(rtrim(stat),".",rtrim(varname)).
execute.
delete variables varname stat.
casestovars index = indexvar.

*save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStatsX.sav")).


* copy list of variables so you can operate the lists.
!let !AVars   = !upcase(!IntVarsA)
!let !BVars   = !upcase(!IntVarsB)
!let !IntVars = !upcase(!IntVec)
!do !IntVar !in(!IntVars)
!let !AVar = !head(!AVars)
!let !BVar = !head(!BVars)

!if (!index(!concat(" ",!upcase(!fcatvars)," "),!concat(" ",!avar," ")) !ne 0 !and
     !index(!concat(" ",!upcase(!fcatvars)," "),!concat(" ",!bvar," ")) !ne 0 ) !then

loop !concat(!Avar,"_N") = !concat("Minimum.",!Avar) to !concat("Maximum.",!Avar). 
loop !concat(!Bvar,"_N") = !concat("Minimum.",!Bvar) to !concat("Maximum.",!Bvar).
xsave outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"0.sav"))
  / keep = !concat(!Avar,"_N") !concat(!Bvar,"_N").
end loop.
end loop.
 !ifend
 !let !AVars   = !tail(!AVars)
 !let !BVars   = !tail(!BVars)
 !doend
 !ifend
execute.

* Create recode statement for each interaction.
* copy list of variables so you can operate lists.
!let !AVars   = !upcase(!IntVarsA)
!let !BVars   = !upcase(!IntVarsB)
!let !IntVars = !upcase(!IntVec)
!do !IntVar !in(!IntVars)
!let !AVar = !head(!AVars)
!let !BVar = !head(!BVars)

* When interacting categorical variables.
!if (!index(!concat(" ",!upcase(!fcatvars)," "),!concat(" ",!upcase(!avar)," ")) !ne 0 !and
     !index(!concat(" ",!upcase(!fcatvars)," "),!concat(" ",!upcase(!bvar)," ")) !ne 0 ) !then

get file = !quote(!concat(!unquote(!outdir),"\",!intvar,"0.sav")).
recode !concat(!Avar,"_n") !concat(!Bvar,"_n") (0 = 99) (else = copy).
sort cases by !concat(!Avar,"_n") !concat(!Bvar,"_n").
select if (!concat(!Avar,"_n") > 1 and !concat(!Bvar,"_n") > 1).
string IntSeq (a4).
compute IntSeq = string($casenum,f4.0).
format !concat(!AVar,"_n") !concat(!BVar,"_n") (f4.0).
alter type !concat(!AVar,"_n") !concat(!BVar,"_n") (a4).
string intvar (a32) RecLine1 RecLine2 (a128).
compute intvar   = concatenate(!quote(!intvar),"_",rtrim(ltrim(IntSeq))).
compute RecLine1 = concatenate("compute ",!quote(!intvar),"_",rtrim(ltrim(IntSeq))," = 0.").
compute RecLine2 = concatenate("if (",!quote(!concat(!AVar,"_n"))," = ", rtrim(ltrim(!concat(!AVar,"_n"))),
                              " and ",!quote(!concat(!BVar,"_n"))," = ", rtrim(ltrim(!concat(!BVar,"_n"))),") ",
                               !quote(!intvar),"_",rtrim(ltrim(IntSeq))," = 1.").
compute k = 1.
aggregate outfile = * mode = addvariables
 / break = k
 / NInteract = n(k).
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt"))
 / RecLine1
 / RecLine2.
execute.
temporary.
select if ($casenum=1).
string chkcode (a128).
compute chkcode = concatenate("means tables = ",!quote(!intvar),"_1 to ",!quote(!intvar),
                  "_", rtrim(ltrim(string(ninteract,f4.0)))," by ",!quote(!concat(!Avar,"_n"))," by ",!quote(!concat(!BVar,"_n")),
                  " / cells=mean / missing=include.").
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt"))
 / chkcode.
execute.
string VarNameA VarNameB (a32).
compute VarNameA = !quote(!AVar).
compute VarNameB = !quote(!BVar).
rename var ( !concat(!AVar,"_n") !concat(!BVar,"_n") =
             GroupA              GroupB).
alter type   GroupA GroupB (a4).
save outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,".sav")) / drop = k.
new file.
erase file = !quote(!concat(!unquote(!outdir),"\",!intvar,"0.sav")).

* Interaction of non categorical with non categorical
!else !if (!index(!concat(" ",!upcase(!fimpmean)," ",!upcase(!fusecrit)," "),!concat(" ",!upcase(!avar)," ")) !ne 0 !and
           !index(!concat(" ",!upcase(!fimpmean)," ",!upcase(!fusecrit)," "),!concat(" ",!upcase(!bvar)," ")) !ne 0 ) !then

data list
 / RecLine1 (a128).
begin data.
!concat("compute ",!intvar,"_1 = ", !avar,"_1 * ",!bvar,"_1.")
end data.
string VarNameA VarNameB IntVar (a32) chkcode (a128) GroupA GroupB (a4).
compute VarNameA = !quote(!AVar).
compute VarNameB = !quote(!BVar).
compute NInteract = 1.
compute IntVar = !quote(!concat(!intvar,"_1")).
compute chkcode = "* None. ".
save outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,".sav")) / drop = chkcode.
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt"))
 / RecLine1 .
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt"))
 / chkcode.

!else

* Interaction of categorical with non categorical.
!if (!index(!concat(" ",!upcase(!fcatvars)," "),!concat(" ",!upcase(!avar)," ")) !ne 0) !then
!let !catvar = !avar
!let !contvar = !bvar
!else
!let !catvar = !bvar
!let !contvar = !avar
!ifend

new file.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav"))
  / drop = VarNameN N Minimum Maximum  VarSeq  CategoryV CategoryVal NCats.
select if (VarName = !quote(!upcase(!catvar)) and Category > 1).
string RecLine1 (a128) IntVar (a32) VarNameA VarNameB (a32) GroupA GroupB (a4).
compute VarNameA = !quote(!AVar).
compute VarNameB = !quote(!BVar).
!if (!catvar = !avar) !then
compute GroupA    = CategorySeq.
!else
compute GroupB    = CategorySeq.
!ifend

compute RecLine1 = concatenate("compute ",!quote(!IntVar),"_",rtrim(CategorySeq)," = ",
                   rtrim(ContrastVar)," * ",!quote(!contvar),"_1 .").
compute IntVar = concatenate(!quote(!IntVar),"_",rtrim(CategorySeq)).
save outfile = !quote(!concat(!unquote(!outdir),"\",!IntVar,".sav"))
  / drop = Category VarName ContrastVar CategorySeq.
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt"))
 / RecLine1 .
write outfile = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt"))
 / "* None. " .
execute.
!ifend
!ifend

!let !AVars   = !tail(!AVars)
!let !BVars   = !tail(!BVars)
!doend

* Include and apply the recodes.

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav")).
weight off.

* include the recoding and check statements.
!if (!fusecrit !ne !null !and !critvar !ne !null) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodes.txt")).
!if (!upcase(!QCStats) = Y) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritRecodesCheck.txt")).
!ifend
!ifend

!if (!fimpmean !ne !null) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodes.txt")).
!if (!upcase(!QCStats) = Y) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanRecodesCheck.txt")).
!ifend
!ifend

!if (!fcatvars !ne !null) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodes.txt")).
!if (!upcase(!QCStats) = Y) !then
include file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatRecodesCheck.txt")).
!ifend
!ifend


* Include recoding statements for the interactions.
!do !IntVar !in(!IntVec)
include file = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Recodes.txt")).
!doend
* check contrast coding of interactions.
!if (!upcase(!QCStats) = Y) !then
!do !IntVar !in(!IntVec)
include file = !quote(!concat(!unquote(!outdir),"\",!intvar,"_Check.txt")).
!doend
!ifend

sort cases by caseseq.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav"))
  / keep = CaseSeq !idvars !keepvars !byvars !wgtvar.

* save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts_all.csv"))
  / type = csv / fieldnames / replace / encoding = 'LOCALE'.

add files
 / file = *
 / drop = k !do !c !in (!fcatvars) !concat(!c,"_n")                                    !doend !fcatvars
            !do !u !in (!fusecrit) !concat(!u,"_n") !concat(!u,"_x") !concat(!u,"_sw") !concat(!critvar,"_",!u,"_x") !doend !fusecrit 
            !do !i !in (!fimpmean) !concat(!i,"_n") !concat(!i,"_x")                   !doend !fimpmean .

match files 
  / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav"))
  / file = *
    / by CaseSeq.

* These so that i will not need to check the first and last variable in the list.
compute FirstVar = 1.
compute LastVar = 1.

save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.sav"))
  / keep = CaseSeq !idvars !keepvars !byvars !wgtvar !wgt !critvar FirstVar ALL LastVar.
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Contrasts.csv"))
  / type = csv / fieldnames / replace / encoding = 'LOCALE' 
  / keep = CaseSeq !idvars !keepvars !byvars !wgtvar !wgt !critvar FirstVar ALL LastVar.


* Create list of UseCrit and ImpMean variables.
!if (!fimpmean !ne !null) !then
data list file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.txt"))
  / Varname (a32) ContrastVar (a32) Type (a32). 
compute VarSeq = trunc(($casenum-1)/2 + 1).
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.sav")).
!ifend

!if (!fusecrit !ne !null !and !critvar !ne !null) !then
data list file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.txt"))
  / Varname (a32) ContrastVar (a32) Type (a32). 
compute VarSeq = $casenum.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.sav")).
!ifend

* Get the list of CatVars.
!if (!fcatvars !ne !null) !then
new file.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav"))
 /  keep = VarSeq VarName Category CategoryV ContrastVar .
select if (Category > 1). 
string Type (a32).
compute Type = "Contrast Coded".
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVars.sav")).
!ifend

* Compile the list of variables.
add files 
 !if (!fusecrit !ne !null !and !critvar !ne !null) !then / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.sav")) !ifend
 !if (!fimpmean !ne !null) !then / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.sav")) !ifend 
 !if (!fcatvars !ne !null) !then / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVars.sav"))     !ifend .
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_RecodedVars.sav")).
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_RecodedVars.csv"))
  / type = csv / fieldnames / replace / encoding = 'LOCALE'.

* Compile the list of new interaction variables.
!if (!IntVec !ne !null) !then
get file = !quote(!concat(!unquote(!outdir),"\",!head(!IntVec),".sav")).
!do !IntVar !in(!tail(!IntVec))
add files
  / file = *
  / file = !quote(!concat(!unquote(!outdir),"\",!intvar,".sav")).
!doend
execute.
save outifle = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.sav")).
*  / keep = VarNameA VarNameB GroupA GroupB IntVar recline1 recline2 NInteract IntSeq.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.sav")).
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.csv"))
  / type = csv / fieldnames / replace / encoding = 'LOCALE'.
!ifend

output save 
  outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.spv"))
  lock = no.

output export
  / contents export=visible layers=printsetting modelviews=printsetting
  / html documentfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.htm"))
    notescaptions=yes interactlayers=no styling=yes imageformat=jpg
  / jpg percentsize=100 grayscale=no.

new file.

!if (!upcase(!clean) = Y) !then
!if (!intvec !ne !null) !then
!do !v !in(!intvec)
erase file = !quote(!concat(!unquote(!outdir),"\",!v,"_Check.txt")).
erase file = !quote(!concat(!unquote(!outdir),"\",!v,"_Recodes.txt")).
erase file = !quote(!concat(!unquote(!outdir),"\",!v,".sav")).
!doend
!ifend

!if (!fcatvars !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVars.sav")).
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats.sav")).
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_CatVarStats2.sav")).
!ifend

!if (!fimpmean !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_ImpMeanVars.sav")).
!ifend

!if (!fusecrit !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_UseCritVars.sav")).
!ifend

!if (!IntVec !ne !null) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Interactions.sav")).
!ifend

erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_RecodedVars.sav")).

!ifend

output save
  outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.spv"))
  lock = no.

output export
  / contents export=visible layers=printsetting modelviews=printsetting
  / html documentfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.htm"))
    notescaptions=yes interactlayers=no styling=yes imageformat=jpg
  / jpg percentsize=100 grayscale=no.

new file.

restore.

!enddefine.


*******************************************.
* macro to get variable information       *.
*******************************************.
define !getvfile ( idir         = !charend('/') /
                   vfile        = !charend('/') /
                   sheet        = !charend('/') !default("") /
                   odir         = !charend('/') /
                   clean        = !charend('/') !default(Y)  /
                   viewcod      = !charend('/') !default(N)  ).

preserve.
* If viewcode is selected.
!if (!upcase(!viewcod)=Y) !then
set mprint=on  printback=on.
!else
set mprint=off printback=off.
!ifend

* when specified, read file with variable classification.
get data
 / type = xlsx
 / file = !quote(!concat(!unquote(!idir),"\",!unquote(!vfile),".xlsx"))
  !if (!sheet !ne !null) !then / sheet = name !quote(!sheet) !ifend
 / datatypemin percentage = 100.

select if (variable <> "").
alter type catvar impmean usecrit (a1).
recode catvar impmean usecrit ("Y","y" = "Y")(else = "").

compute vseq = $casenum.
format vseq (f3.0).
save translate
  / outfile= !quote(!concat(!unquote(!odir),"\",!vfile,"_",!sheet,"_VarList.csv"))
  / replace  / type = csv
  / keep = variable catvar impmean usecrit
  / fieldnames / encoding = 'LOCALE'.
execute.
compute k = 1.
match files
 / file = * / first = fvariable / last = lvariable
 / by k.
string front back (a24).
if (fvariable <>1) front = '              '.
if (lvariable <>1) back  = '              '.
if (lvariable = 1) back  = concat('   !','enddefine.').

alter type catvar impmean usecrit (a32).
if (catvar  = "Y") catvar  = variable.
if (impmean = "Y") impmean = variable.
if (usecrit = "Y") usecrit = variable.

if (fvariable = 1) front = concat('define !','ctvr () ').
write outfile = !quote(!concat(!unquote(!odir),"\ctvr.tmp"))
 / 1 front catvar back.
if (fvariable = 1) front = concat('define !','imvr () ').
write outfile = !quote(!concat(!unquote(!odir),"\imvr.tmp"))
 / 1 front impmean back.
if (fvariable = 1) front = concat('define !','ucvr () ').
write outfile = !quote(!concat(!unquote(!odir),"\ucvr.tmp"))
 / 1 front usecrit back.
execute.
!onexpand.
include file = !quote(!concat(!unquote(!odir),"\ctvr.tmp")).
include file = !quote(!concat(!unquote(!odir),"\imvr.tmp")).
include file = !quote(!concat(!unquote(!odir),"\ucvr.tmp")).
execute.

!if (!upcase(!clean) = Y) !then
erase file = !quote(!concat(!unquote(!odir),"\ctvr.tmp")).
erase file = !quote(!concat(!unquote(!odir),"\imvr.tmp")).
erase file = !quote(!concat(!unquote(!odir),"\ucvr.tmp")).
!ifend

restore.

!enddefine.